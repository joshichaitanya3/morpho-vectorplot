/*
Vectorplot module to visualize vector fields on meshes in Morpho

Chaitanya Joshi
chaitanyajoshi.usa@gmail.com

*/
import plot 

/** Visualizes a vector field
 * @param[in] field - the vector field
 * @param[in] grade - Grade to show
 * @param[in] colormap - Colormap to use
 * @param[in] style - style to use
 * @param[in] scale - whether or not to scale values */
fn plotvectorfield(field,
                   grade=nil, 
                   noarrows=false, 
                   dl=1,
                   colorby=nil,
                   colormap=nil, 
                   scale=true, 
                   filter=nil, 
                   transmit=nil, 
                   scalebar=nil,
                   showmesh=true) {
    
    var mesh = field.mesh()
    var colorfield = Field(mesh, 0.0)
    if (colorby=="norm") {
        colorfield = field.op(fn (x) x.norm())
    }
    else if (colorby=="x") {
        colorfield = field.op(fn (x) x[0])
    }
    else if (colorby=="y") {
        colorfield = field.op(fn (x) x[1])
    }
    else if (colorby=="z") {
        colorfield = field.op(fn (x) x[2])
    }
    else if (!isnil(colorby)) {
        Error("InvalidColorby", "The optional `colorby` argument can only be set to `norm`, `x`, `y` or `z`.").throw()
    }

    var cm=colormap
    if (cm==nil) cm = ViridisMap()    // Default color map

    var bnd=bounds(colorfield)         // Find bounds for the field
    var sc = bnd[1]-bnd[0]
    if (abs(sc)>1e-16) sc=1/sc else sc = 1

    var shape = field.shape()
    var v = mesh.vertexmatrix()
    var nv = mesh.count()
    var out = Graphics()
    for (i in 0...nv) {
        var x = v.column(i)
        var val = colorfield[i]
        if (scale) val=(val-bnd[0])*sc
        var col = Matrix(cm.rgb(val))
        if (field[i].norm()==0) continue
        if (noarrows) out.display(Cylinder(x-field[i]*dl, x+field[i]*dl, aspectratio=0.3, color=col, filter=filter, transmit=transmit))
        else out.display(Arrow(x-field[i]*dl, x+field[i]*dl, aspectratio=0.3, color=col, filter=filter, transmit=transmit))
    }
    if (showmesh) out += plotmesh(mesh, grade=1, filter=filter, transmit=transmit)

    if (isobject(scalebar)) {
    var s = scalebar
    s.colormap=cm
    out+=s.draw(bnd[0], bnd[1]) 
    }

    return out 
}
